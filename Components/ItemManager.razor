@inject Blazored.LocalStorage.ILocalStorageService localStore
@implements IDisposable

<p>
    <select
        class="selectpicker"
        @bind="_currentItem.Type">
            <option value="@Item.ItemType.Note">Note</option>
            <option value="@Item.ItemType.Slider">Slider</option>
    </select>

    <input
        type="text"
        placeholder="Title"
        @bind="_currentItem.Title" />
    <input
        type="text"
        placeholder="Description"
        @bind="_currentItem.Description" />

    <button
        class="btn btn-primary"
        @onclick="AddItem">
            Add
    </button>
    <button
        class="btn btn-primary"
        @onclick="RemoveAllItems">
            Clear
    </button>
</p>

@code {
    [Parameter]
    public List<Item> AllItems { get; set; }
    [Parameter]
    public EventCallback<List<Item>> AllItemsChanged { get; set; }

    // Action<> perhaps instead of EventHandler? (I don't think so).
    public static event EventHandler ItemAdded;

    private int         _currentItemId;
    private Item        _currentItem;
    // automatically invoke EventCallback when set.
    private List<Item>  _allItems
        {
            get => AllItems;
            set
            {
                AllItems = value;
                AllItemsChanged.InvokeAsync(value);
            }
        }

    protected override async Task OnInitializedAsync()
    {
        InitializeCurrentItem();
        Main.SliderValueChanged += MainOnSliderValueChanged;
        Main.ItemUpdated += MainOnItemUpdated;
        Main.ItemRemoved += MainOnItemRemoved;
        _allItems = await GetItems();
        if (_allItems != null)
        {
            _currentItemId = _allItems[^1].ItemId + 1;
        }
    }
    private async void AddItem(EventArgs e)
    {
        if (_allItems == null)
        {
            _allItems = new List<Item>();
        }
        else
        {
            // don't add an item if the title is the same.
            for (int i = 0; i < _allItems.Count; i++)
            {
                // TODO: error handling.
                if (_currentItem.Title == _allItems[i].Title) return;
            }
        }

        _currentItem.ItemId = _currentItemId;
        _currentItem.Created = _currentItem.Updated = DateTime.Now;

        _allItems.Add(_currentItem);

        await SetItems(_allItems);

        ItemAdded?.Invoke(this, e);

        _currentItemId++;
        InitializeCurrentItem();

        StateHasChanged();
    }

    private async void RemoveAllItems()
    {
        await localStore.ClearAsync();

        _allItems = new List<Item>();
        _currentItemId = 0;
    }

    public async void MainOnSliderValueChanged(object sender, SliderEventCallbackArgs args)
    {
        _allItems[_allItems.FindIndex(x => x.ItemId == args.ItemId)].Value = args.Value;

        await UpdateItems(_allItems);
    }

    public async void MainOnItemUpdated(object sender, UpdateEventCallbackArgs args)
    {
        _allItems[_allItems.FindIndex(x => x.ItemId == args.ItemId)].Title = args.Title;

        await UpdateItems(_allItems);
    }

    public async void MainOnItemRemoved(object sender, int itemId)
    {
        _allItems.RemoveAt(_allItems.FindIndex(x => x.ItemId == itemId));

        if (_allItems.Count == 0)
        {
            await localStore.ClearAsync();
            _currentItemId = 0;
        }
        else
        {
            await UpdateItems(_allItems);
        }
    }

    private async Task UpdateItems(List<Item> items)
    {
        await SetItems(_allItems);

        _currentItemId = _allItems[^1].ItemId + 1;
        InitializeCurrentItem();

        StateHasChanged();
    }

    private async Task<List<Item>> GetItems()
    {
        return await localStore.GetItemAsync<List<Item>>("items");
    }

    private async Task SetItems(List<Item> items)
    {
        await localStore.SetItemAsync<List<Item>>("items", items);
    }

    private void InitializeCurrentItem()
    {
        _currentItem = new Item
                    {
                        ItemId = -1,
                        Title = "",
                        Description = "",
                        Value = 0.0f,
                        Notes = "",
                        Type = 0,
                        Created = DateTime.UnixEpoch,
                        Updated = DateTime.UnixEpoch
                    };
    }

    public void Dispose()
    {
        Main.SliderValueChanged -= MainOnSliderValueChanged;
        Main.ItemUpdated -= MainOnItemUpdated;
        Main.ItemRemoved -= MainOnItemRemoved;
    }
}