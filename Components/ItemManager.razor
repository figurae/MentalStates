@inject Blazored.LocalStorage.ILocalStorageService localStore
@implements IDisposable

<style>
    select {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        max-width: 150px;
    }
</style>

<p>
    <select
        class="selectpicker"
        @bind="SelectedSetId">
            <option
                value="-1"
                disabled
                hidden>
                    Select set
            </option>
            @if (_allSets != null)
            {
                foreach (var set in _allSets.OrderBy(x => x.Name).ToList())
                {
                    <option
                        value="@set.SetId">
                            @set.Name
                    </option>
                }
            }
            else
            {
                <option
                    value=""
                    disabled>
                        No sets in database
                </option>
            }
    </select>

    <button
        class="btn btn-primary"
        @onclick="AddSetMode">
            Create a new set
    </button>

    @if (_addSetMode && _currentSet != null)
    {
        <br />
        <input
            type="text"
            placeholder="Set name"
            @bind="_currentSet.Name" />
        <input
            type="text"
            placeholder="Set description"
            @bind="_currentSet.Description" />

        <button
            class="btn btn-primary"
            @onclick="AddSet">
                Save
        </button>
        <button
            class="btn btn-primary"
            @onclick="AddSetMode">
                Cancel
        </button>
    }
</p>
<!-- show only if a set is selected -->
@if (SelectedSetId >= 0 && _currentSet != null && _currentItem != null)
{
    <p>
        Set name: @_currentSet.Name, description: @_currentSet.Description.
        <button
            class="btn btn-primary"
            @onclick="ModifySet">
                Update this set
        </button>
        <button
            class="btn btn-primary"
            @onclick="RemoveSet">
                Delete this set
        </button>
    </p>
    <p>
        <select
            class="selectpicker"
            @bind="_currentItem.Type">
                <option
                    value="@Item.ItemType.NoType"
                    disabled
                    hidden>
                        Select item type
                </option>
                <option
                    value="@Item.ItemType.Note">
                        Note
                </option>
                <option
                    value="@Item.ItemType.Slider">
                        Slider
                </option>
        </select>

        <input
            type="text"
            placeholder="Title"
            @bind="_currentItem.Title" />
        <input
            type="text"
            placeholder="Description"
            @bind="_currentItem.Description" />

        <button
            class="btn btn-primary"
            @onclick="AddItem">
                Add a new item
        </button>
        <button
            class="btn btn-primary"
            @onclick="RemoveAllItems">
                Delete all items
        </button>
    </p>
}

@code {
    [Parameter]
    public int SelectedSetId
    {
        get
        {
            return _selectedSetId;
        }
        set
        {
            // TODO: error handling.
            _addSetMode = false;

            _selectedSetId = value;

            if (_allSets != null)
            {
                _currentSet = _allSets[value];

                _allItems = new List<Item>(_allSets[value].Items);

                _currentItemId = _allItems[^1].ItemId + 1;
            }
        }
    }
    [Parameter]
    public List<Item>? AllItems { get; set; }
    [Parameter]
    public EventCallback<List<Item>> AllItemsChanged { get; set; }

    // Action<> perhaps instead of EventHandler? (I don't think so).
    public static event EventHandler? ItemAdded;

    private int         _selectedSetId = -1;
    private int         _currentSetId = 0;
    private Set?        _currentSet;
    private List<Set>?  _allSets;
    private bool        _addSetMode = false;
    private int         _currentItemId = 0;
    private Item?       _currentItem;
    // automagically invoke EventCallback when set.
    private List<Item>? _allItems
        {
            get => AllItems;
            set
            {
                AllItems = value;
                AllItemsChanged.InvokeAsync(value);
            }
        }

    protected override async Task OnInitializedAsync()
    {
        InitializeCurrentSet();
        InitializeCurrentItem();

        Main.SliderValueChanged += MainOnSliderValueChanged;
        Main.ItemUpdated += MainOnItemUpdated;
        Main.ItemRemoved += MainOnItemRemoved;

        _allSets = await GetSets();

        if (_allSets != null)
        {
            _currentSetId = _allSets[^1].SetId + 1;
        }
    }
    private async void AddItem(EventArgs e)
    {
        if (_currentItem == null || _currentItem.Title == "")
        {
            // TODO: error handling.
            return;
        }

        if (_allItems != null)
        {
            // don't add an item if the title is the same.
            for (int i = 0; i < _allItems.Count; i++)
            {
                // TODO: error handling.
                if (_currentItem.Title == _allItems[i].Title)
                    return;
            }
        }
        else
        {
            _allItems = new List<Item>();
        }

        _currentItem.ItemId = _currentItemId;
        _currentItem.Created = _currentItem.Updated = DateTime.Now;

        _allItems.Add(_currentItem);

        await SaveItems(_allItems);

        ItemAdded?.Invoke(this, e);

        _currentItemId++;

        Item.ItemType _previousType = _currentItem.Type;

        InitializeCurrentItem();

        _currentItem.Type = _previousType;

        StateHasChanged();
    }

    private async Task RemoveAllItems()
    {
        await localStore.RemoveItemAsync("items");

        _allItems = new List<Item>();
        _currentItemId = 0;
    }

    public async void MainOnSliderValueChanged(object? sender, SliderEventCallbackArgs args)
    {
        if (_allItems == null)
            return;

        int index = _allItems.FindIndex(x => x.ItemId == args.ItemId);

        _allItems[index].Value = args.Value;
        _allItems[index].Updated = DateTime.Now;

        await UpdateItems(_allItems);
    }

    public async void MainOnItemUpdated(object? sender, UpdateEventCallbackArgs args)
    {
        if (_allItems == null)
            return;

        int index = _allItems.FindIndex(x => x.ItemId == args.ItemId);

        _allItems[index].Title = args.Title;
        _allItems[index].Updated = DateTime.Now;

        await UpdateItems(_allItems);
    }

    public async void MainOnItemRemoved(object? sender, int itemId)
    {
        if (_allItems == null)
            return;

        _allItems.RemoveAt(_allItems.FindIndex(x => x.ItemId == itemId));

        if (_allItems.Count == 0)
        {
            await RemoveAllItems();
        }
        else
        {
            await UpdateItems(_allItems);
        }
    }

    private async Task UpdateItems(List<Item> items)
    {
        if (_allItems == null)
            return;

        await SaveItems(_allItems);

        _currentItemId = _allItems[^1].ItemId + 1;
        InitializeCurrentItem();

        StateHasChanged();
    }

    private async Task<List<Item>> GetItems()
    {
        return await localStore.GetItemAsync<List<Item>>("items");
    }

    private async Task SaveItems(List<Item> items)
    {
        await localStore.SetItemAsync<List<Item>>("items", items);
    }

    private void InitializeCurrentItem()
    {
        _currentItem = new Item
                    {
                        ItemId = -1,
                        Title = "",
                        Description = "",
                        Value = 0.0f,
                        Notes = "",
                        Type = Item.ItemType.NoType,
                        Created = DateTime.UnixEpoch,
                        Updated = DateTime.UnixEpoch
                    };
    }

    private async Task AddSetMode()
    {
        if (_selectedSetId >= 0)
        {
            await RemoveAllItems();
            _selectedSetId = -1;
        }

        InitializeCurrentSet();

        _addSetMode = !_addSetMode;
    }

    private async Task AddSet()
    {
        if (_currentSet == null || _currentSet.Name == "" || _allItems == null)
        {
            // TODO: error handling.
            return;
        }

        if (_allSets != null)
        {
            // don't add a set if the name is the same.
            for (int i = 0; i < _allSets.Count; i++)
            {
                // TODO: error handling.
                if (_currentSet.Name == _allSets[i].Name)
                    return;
            }
        }
        else
        {
            _allSets = new List<Set>();
        }

        _currentSet.SetId = _currentSetId;
        _currentSet.Items = _allItems;
        _currentSet.Created = _currentSet.Updated = DateTime.Now;

        _allSets.Add(_currentSet);

        await SaveSets(_allSets);

        _currentSetId++;
        InitializeCurrentSet();

        await RemoveAllItems();
    }

    private async Task ModifySet()
    {
        if (_allSets == null)
            return;

        await SaveSets(_allSets);
        await RemoveAllItems();
    }

    private async Task RemoveSet()
    {
        if (_allSets == null)
            return;

        _allSets.RemoveAt(SelectedSetId);

        await RemoveAllItems();

        if (_allSets.Count == 0)
        {
            await localStore.RemoveItemAsync("sets");
            _currentSetId = 0;
        }
        else
        {
            await SaveSets(_allSets);
        }
    }

    private async Task<List<Set>> GetSets()
    {
        return await localStore.GetItemAsync<List<Set>>("sets");
    }

    private async Task SaveSets(List<Set> sets)
    {
        await localStore.SetItemAsync<List<Set>>("sets", sets);
    }

    private void InitializeCurrentSet()
    {
        _currentSet = new Set
                {
                    SetId = -1,
                    Name = "",
                    Description = "",
                    Created = DateTime.UnixEpoch,
                    Updated = DateTime.UnixEpoch
                };
    }

    public void Dispose()
    {
        Main.SliderValueChanged -= MainOnSliderValueChanged;
        Main.ItemUpdated -= MainOnItemUpdated;
        Main.ItemRemoved -= MainOnItemRemoved;
    }
}