@inject Blazored.LocalStorage.ILocalStorageService localStore
@implements IDisposable

<div>
    <MentalStates.Components.ItemManager @bind-AllItems="_storeItems" />
    @if (_storeItems != null)
    {
        for (int i = 0; i < _storeItems.Count; i++)
        {
            <MentalStates.Components.ItemSlider
            ItemId="@_storeItems[i].ItemId"
            Title="@_storeItems[i].Title.ToString()"
            SliderValue="@_storeItems[i].Value"
            OnSliderMoved="SliderMoved"
            OnRemoveItemClicked="RemoveItemClicked"
            OnUpdateItemClicked="UpdateItemClicked" />
        }
    }
</div>

@code
{
    private List<Item>? _storeItems { get; set; }
    private Item? _currentItem;

    public static event EventHandler<SliderEventCallbackArgs>?  SliderValueChanged;
    public static event EventHandler<UpdateEventCallbackArgs>?  ItemUpdated;
    public static event EventHandler<int>?                      ItemRemoved;

    protected override void OnInitialized()
    {
        // event/state manager to handle all types of events?
        ItemManager.ItemAdded += ItemManagerOnItemAdded;
    }

    private void ItemManagerOnItemAdded(object? sender, EventArgs e)
    {
        StateHasChanged();
    }

    // should I do anything with this?
    public void Dispose()
    {
        System.Console.WriteLine("Inside Dispose()");
        ItemManager.ItemAdded -= ItemManagerOnItemAdded;
    }


    private async Task<Item> GetItem(int itemId)
    {
        return await localStore.GetItemAsync<Item>(itemId.ToString());
    }

    private void SliderMoved(SliderEventCallbackArgs args)
    {
        SliderValueChanged?.Invoke(this, args);
    }

    private void UpdateItemClicked(UpdateEventCallbackArgs args)
    {
        ItemUpdated?.Invoke(this, args);
    }

    private void RemoveItemClicked(int itemId)
    {
        ItemRemoved?.Invoke(this, itemId);
    }
}